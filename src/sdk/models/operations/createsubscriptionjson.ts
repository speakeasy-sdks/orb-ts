/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Optionally provide the name of the external marketplace that the subscription is attached to.
 */
export enum CreateSubscriptionApplicationJSONExternalMarketplace {
    Google = "google",
    Aws = "aws",
    Azure = "azure",
}

/**
 * User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the subscription resource.
 */
export class CreateSubscriptionApplicationJSONMetadata extends SpeakeasyBase {}

export class CreateSubscriptionApplicationJSONPhaseOverrides extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.Discount)
    discount?: shared.Discount;

    /**
     * The new minimum amount for the phase. Providing `null` will clear the existing minimum, if it exists.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    /**
     * The phase order that is being modified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "order" })
    order?: number;
}

export enum CreateSubscriptionApplicationJSONPriceOverrides7ModelType {
    TieredBps = "tiered_bps",
}

export class CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfigTiers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bps" })
    bps: number;

    @SpeakeasyMetadata()
    @Expose({ name: "maximum_amount" })
    maximumAmount: string;

    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount: string;

    @SpeakeasyMetadata()
    @Expose({ name: "per_unit_maximum" })
    perUnitMaximum: string;
}

export class CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfig extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfigTiers,
    })
    @Expose({ name: "tiers" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfigTiers)
    tiers: CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfigTiers[];
}

/**
 * Tiered BPS price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides7 extends SpeakeasyBase {
    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides7ModelType;

    @SpeakeasyMetadata()
    @Expose({ name: "tiered_bps_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfig)
    tieredBpsConfig: CreateSubscriptionApplicationJSONPriceOverrides7TieredBpsConfig;
}

export class CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfigTiers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bps" })
    bps: number;

    @SpeakeasyMetadata()
    @Expose({ name: "maximum_amount" })
    maximumAmount: string;

    @SpeakeasyMetadata()
    @Expose({ name: "per_unit_maximum" })
    perUnitMaximum: string;
}

export class CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfig extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfigTiers,
    })
    @Expose({ name: "tiers" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfigTiers)
    tiers?: CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfigTiers[];
}

export enum CreateSubscriptionApplicationJSONPriceOverrides6ModelType {
    BulkBps = "bulk_bps",
}

/**
 * Bulk BPS price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides6 extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bulk_bps_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfig)
    bulkBpsConfig?: CreateSubscriptionApplicationJSONPriceOverrides6BulkBpsConfig;

    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides6ModelType;
}

export class CreateSubscriptionApplicationJSONPriceOverrides5BpsConfig extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bps" })
    bps: number;

    @SpeakeasyMetadata()
    @Expose({ name: "per_unit_maximum" })
    perUnitMaximum: string;
}

export enum CreateSubscriptionApplicationJSONPriceOverrides5ModelType {
    Bps = "bps",
}

/**
 * BPS price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides5 extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bps_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides5BpsConfig)
    bpsConfig: CreateSubscriptionApplicationJSONPriceOverrides5BpsConfig;

    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides5ModelType;
}

export enum CreateSubscriptionApplicationJSONPriceOverrides4ModelType {
    Package = "package",
}

export class CreateSubscriptionApplicationJSONPriceOverrides4PackageConfig extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "package_amount" })
    packageAmount: string;

    @SpeakeasyMetadata()
    @Expose({ name: "package_size" })
    packageSize: number;
}

/**
 * Package price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides4 extends SpeakeasyBase {
    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides4ModelType;

    @SpeakeasyMetadata()
    @Expose({ name: "package_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides4PackageConfig)
    packageConfig: CreateSubscriptionApplicationJSONPriceOverrides4PackageConfig;
}

export class CreateSubscriptionApplicationJSONPriceOverrides3BulkConfigTiers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "maximum_units" })
    maximumUnits: string;

    @SpeakeasyMetadata()
    @Expose({ name: "unit_amount" })
    unitAmount: string;
}

export class CreateSubscriptionApplicationJSONPriceOverrides3BulkConfig extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: CreateSubscriptionApplicationJSONPriceOverrides3BulkConfigTiers,
    })
    @Expose({ name: "tiers" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides3BulkConfigTiers)
    tiers: CreateSubscriptionApplicationJSONPriceOverrides3BulkConfigTiers[];
}

export enum CreateSubscriptionApplicationJSONPriceOverrides3ModelType {
    Bulk = "bulk",
}

/**
 * Bulk price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides3 extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bulk_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides3BulkConfig)
    bulkConfig: CreateSubscriptionApplicationJSONPriceOverrides3BulkConfig;

    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides3ModelType;
}

export enum CreateSubscriptionApplicationJSONPriceOverrides2ModelType {
    Unit = "unit",
}

export class CreateSubscriptionApplicationJSONPriceOverrides2UnitConfig extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "unit_amount" })
    unitAmount: string;
}

/**
 * Unit price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides2 extends SpeakeasyBase {
    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    @SpeakeasyMetadata()
    @Expose({ name: "fixed_price_quantity" })
    fixedPriceQuantity?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides2ModelType;

    @SpeakeasyMetadata()
    @Expose({ name: "unit_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides2UnitConfig)
    unitConfig: CreateSubscriptionApplicationJSONPriceOverrides2UnitConfig;
}

export enum CreateSubscriptionApplicationJSONPriceOverrides1ModelType {
    Tiered = "tiered",
}

export class CreateSubscriptionApplicationJSONPriceOverrides1TieredConfigTiers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "first_unit" })
    firstUnit?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "last_unit" })
    lastUnit?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "unit_amount" })
    unitAmount?: string;
}

export class CreateSubscriptionApplicationJSONPriceOverrides1TieredConfig extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: CreateSubscriptionApplicationJSONPriceOverrides1TieredConfigTiers,
    })
    @Expose({ name: "tiers" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides1TieredConfigTiers)
    tiers?: CreateSubscriptionApplicationJSONPriceOverrides1TieredConfigTiers[];
}

/**
 * Tiered price override
 */
export class CreateSubscriptionApplicationJSONPriceOverrides1 extends SpeakeasyBase {
    /**
     * The subscription's override discount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => shared.CreateDiscount)
    discount?: shared.CreateDiscount;

    /**
     * price_id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The subscription's override minimum amount for this price.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_type" })
    modelType: CreateSubscriptionApplicationJSONPriceOverrides1ModelType;

    @SpeakeasyMetadata()
    @Expose({ name: "tiered_config" })
    @Type(() => CreateSubscriptionApplicationJSONPriceOverrides1TieredConfig)
    tieredConfig: CreateSubscriptionApplicationJSONPriceOverrides1TieredConfig;
}

export class CreateSubscriptionApplicationJSON extends SpeakeasyBase {
    /**
     * Align billing periods with the subscription's start_date. If this is not provided, this defaults to aligning billing periods with the start of the month.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "align_billing_with_subscription_start_date" })
    alignBillingWithSubscriptionStartDate?: boolean;

    /**
     * Used to determine whether Orb will attempt to automatically charge the payment method on file for the customer corresponding to this subscription. If not provided, the property on the corresponding customer will be honored.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "auto_collection" })
    autoCollection?: boolean;

    /**
     * Redemption code to be used for this subscription. If the coupon cannot be found by its redemption code, or cannot be redeemed, an error response will be returned and the plan change will not be scheduled.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "coupon_redemption_code" })
    couponRedemptionCode?: string;

    /**
     * The ID of the customer to subscribe.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Invoices for this subscription will populate with this memo. When not set, the plan-level setting for memo will be used.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "default_invoice_memo" })
    defaultInvoiceMemo?: string;

    /**
     * The external ID of the customer to subscribe, as an alternate to passing the `customer_id`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_customer_id" })
    externalCustomerId?: string;

    /**
     * Optionally provide the name of the external marketplace that the subscription is attached to.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_marketplace" })
    externalMarketplace?: CreateSubscriptionApplicationJSONExternalMarketplace;

    /**
     * The reporting ID to associate this subscription with the external marketplace. Required if external_marketplace is specified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_marketplace_reporting_id" })
    externalMarketplaceReportingId?: string;

    /**
     * The external ID of the plan, which can be used in place of the `plan_id`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_plan_id" })
    externalPlanId?: string;

    /**
     * User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the subscription resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => CreateSubscriptionApplicationJSONMetadata)
    metadata?: CreateSubscriptionApplicationJSONMetadata;

    /**
     * The subscription's override minimum amount for the plan.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "minimum_amount" })
    minimumAmount?: string;

    /**
     * The net terms of a subscription determine when a subscription's invoice is due relative to its issue date. Whereas a net terms of 0 signifies "due on issue", a net terms of 30 can be used to provide the customer one month to pay the invoice. By default, the subscription defaults to the plan's net terms configuration.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "net_terms" })
    netTerms?: number;

    /**
     * Optionally provide a list of minimum amount or discount overrides for phases on the plan.
     */
    @SpeakeasyMetadata({ elemType: CreateSubscriptionApplicationJSONPhaseOverrides })
    @Expose({ name: "phase_overrides" })
    @Type(() => CreateSubscriptionApplicationJSONPhaseOverrides)
    phaseOverrides?: CreateSubscriptionApplicationJSONPhaseOverrides[];

    /**
     * The plan that the given customer should be subscribed to. The plan determines the pricing and cadence of the subscription.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "plan_id" })
    planId?: string;

    /**
     * Optionally provide a list of overrides for prices on the plan
     */
    @SpeakeasyMetadata()
    @Expose({ name: "price_overrides" })
    priceOverrides?: any[];

    /**
     * The date that Orb should start billing for the subscription, localized to the customer's timezone. If this is not provided, this defaults to the current date in the customer's timezone.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "start_date" })
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    startDate?: RFCDate;
}

export class CreateSubscriptionJsonResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    subscription?: shared.Subscription;
}
