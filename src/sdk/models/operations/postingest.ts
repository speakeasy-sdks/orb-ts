/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostIngestRequestBodyEvents extends SpeakeasyBase {
    /**
     * The Orb Customer identifier
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * A name to meaningfully identify the action or event type.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_name" })
    eventName: string;

    /**
     * An alias for the Orb customer, whose mapping is specified when creating the customer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_customer_id" })
    externalCustomerId?: string;

    /**
     * A unique value, generated by the client, that is used to de-duplicate events. Exactly one event with a given idempotency key will be ingested, which allows for safe request retries.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "idempotency_key" })
    idempotencyKey: string;

    /**
     * A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "properties" })
    properties: Record<string, any>;

    /**
     * An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "timestamp" })
    timestamp: string;
}

export class PostIngestRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PostIngestRequestBodyEvents })
    @Expose({ name: "events" })
    @Type(() => PostIngestRequestBodyEvents)
    events: PostIngestRequestBodyEvents[];
}

/**
 * Flag to enable additional debug information in the endpoint response
 */
export enum PostIngestDebug {
    True = "true",
    False = "false",
}

export class PostIngestRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: PostIngestRequestBody;

    /**
     * Flag to enable additional debug information in the endpoint response
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=debug" })
    debug?: PostIngestDebug;
}

/**
 * Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
 */
export class PostIngest400ApplicationJSONDebug extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "duplicate" })
    duplicate?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "ingested" })
    ingested?: string[];
}

export class PostIngest400ApplicationJSONValidationFailed extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "idempotency_key" })
    idempotencyKey?: string;

    /**
     * An array of objects corresponding to validation failures for each idempotency_key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "validation_errors" })
    validationErrors?: string[];
}

/**
 * Bad Request
 */
export class PostIngest400ApplicationJSON extends SpeakeasyBase {
    /**
     * Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "debug" })
    @Type(() => PostIngest400ApplicationJSONDebug)
    debug?: PostIngest400ApplicationJSONDebug;

    /**
     * Contains all failing validation events. In the case of a 400, there will be at least one entry in this array.
     */
    @SpeakeasyMetadata({ elemType: PostIngest400ApplicationJSONValidationFailed })
    @Expose({ name: "validation_failed" })
    @Type(() => PostIngest400ApplicationJSONValidationFailed)
    validationFailed: PostIngest400ApplicationJSONValidationFailed[];
}

/**
 * Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
 */
export class PostIngest200ApplicationJSONDebug extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "duplicate" })
    duplicate?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "ingested" })
    ingested?: string[];
}

export class PostIngest200ApplicationJSONValidationFailed extends SpeakeasyBase {
    /**
     * The passed idempotency_key corresponding to the validation_errors
     */
    @SpeakeasyMetadata()
    @Expose({ name: "idempotency_key" })
    idempotencyKey?: string;

    /**
     * An array of objects corresponding to validation failures for each idempotency_key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "validation_errors" })
    validationErrors?: Record<string, any>[];
}

/**
 * OK
 */
export class PostIngest200ApplicationJSON extends SpeakeasyBase {
    /**
     * Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "debug" })
    @Type(() => PostIngest200ApplicationJSONDebug)
    debug?: PostIngest200ApplicationJSONDebug;

    /**
     * Contains all failing validation events. In the case of a 200, this array will always be empty. This field will always be present.
     */
    @SpeakeasyMetadata({ elemType: PostIngest200ApplicationJSONValidationFailed })
    @Expose({ name: "validation_failed" })
    @Type(() => PostIngest200ApplicationJSONValidationFailed)
    validationFailed: PostIngest200ApplicationJSONValidationFailed[];
}

export class PostIngestResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    postIngest200ApplicationJSONObject?: PostIngest200ApplicationJSON;

    /**
     * Bad Request
     */
    @SpeakeasyMetadata()
    postIngest400ApplicationJSONObject?: PostIngest400ApplicationJSON;
}
