/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class CreateBackfillRequestBody extends SpeakeasyBase {
    /**
     * The time at which no more events will be accepted for this backfill. The backfill will automatically begin reflecting throughout Orb at the close time. If not specified, it will default to 1 day after the creation of the backfill.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "close_time" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    closeTime?: Date;

    /**
     * The ID of the customer to which this backfill is scoped.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * The external customer ID of the customer to which this backfill is scoped.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "external_customer_id" })
    externalCustomerId?: string;

    /**
     * If true, replaces all existing events in the timeframe with the newly ingested events. If false, adds the newly ingested events to the existing events.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "replace_existing_events" })
    replaceExistingEvents: boolean;

    /**
     * The (exclusive) end of the usage timeframe affected by this backfill.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "timeframe_end" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    timeframeEnd: Date;

    /**
     * The (inclusive) end of the usage timeframe affected by this backfill.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "timeframe_start" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    timeframeStart: Date;
}

export class CreateBackfillResponse extends SpeakeasyBase {
    /**
     * OK
     */
    @SpeakeasyMetadata()
    backfill?: shared.Backfill;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
