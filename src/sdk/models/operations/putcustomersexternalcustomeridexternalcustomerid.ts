/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
 */
export class PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyBillingAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "city" })
    city?: string;

    /**
     * Two-letter country code (ISO 3166-1 alpha-2).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "country" })
    country?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "line1" })
    line1?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "line2" })
    line2?: string;

    /**
     * ZIP or postal code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "postal_code" })
    postalCode?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: string;
}

/**
 * This is used for creating charges or invoices in an external system via Orb. When not in test mode:
 *
 * @remarks
 * - the connection must first be configured in the Orb webapp.
 * - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
 */
export enum PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyPaymentProvider {
    Quickbooks = "quickbooks",
    StripeCharge = "stripe_charge",
    StripeInvoice = "stripe_invoice",
    BillCom = "bill.com",
    LessThanNilGreaterThan = "<nil>",
}

/**
 * The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
 */
export class PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyShippingAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "city" })
    city?: string;

    /**
     * Two-letter country code (ISO 3166-1 alpha-2).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "country" })
    country?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "line1" })
    line1?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "line2" })
    line2?: string;

    /**
     * ZIP or postal code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "postal_code" })
    postalCode?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: string;
}

export class PutCustomersExternalCustomerIdExternalCustomerIdRequestBody extends SpeakeasyBase {
    /**
     * The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_address" })
    @Type(() => PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyBillingAddress)
    billingAddress?: PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyBillingAddress;

    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * This is used for creating charges or invoices in an external system via Orb. When not in test mode:
     *
     * @remarks
     * - the connection must first be configured in the Orb webapp.
     * - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_provider" })
    paymentProvider?: PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyPaymentProvider;

    /**
     * The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_provider_id" })
    paymentProviderId?: string;

    /**
     * The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "shipping_address" })
    @Type(() => PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyShippingAddress)
    shippingAddress?: PutCustomersExternalCustomerIdExternalCustomerIdRequestBodyShippingAddress;
}

export class PutCustomersExternalCustomerIdExternalCustomerIdRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: PutCustomersExternalCustomerIdExternalCustomerIdRequestBody;

    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=external_customer_id" })
    externalCustomerId: string;
}

export class PutCustomersExternalCustomerIdExternalCustomerIdResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    customer?: shared.Customer;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
