/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * This is used for creating charges or invoices in an external system via Orb. When not in test mode:
 *
 * @remarks
 * - the connection must first be configured in the Orb webapp.
 * - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
 */
export enum UpdateCustomerExternalIdRequestBodyPaymentProvider {
    Quickbooks = "quickbooks",
    StripeCharge = "stripe_charge",
    StripeInvoice = "stripe_invoice",
    BillCom = "bill.com",
    Null = "null",
}

export class UpdateCustomerExternalIdRequestBody extends SpeakeasyBase {
    /**
     * The customer's billing address; all fields in the address are optional. This address appears on customer invoices.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_address" })
    @Type(() => shared.BillingAddress)
    billingAddress?: shared.BillingAddress;

    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * This is used for creating charges or invoices in an external system via Orb. When not in test mode:
     *
     * @remarks
     * - the connection must first be configured in the Orb webapp.
     * - if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`), any product mappings must first be configured with the Orb team.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_provider" })
    paymentProvider?: UpdateCustomerExternalIdRequestBodyPaymentProvider;

    /**
     * The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_provider_id" })
    paymentProviderId?: string;

    /**
     * The customer's shipping address; all fields in the address are optional. Note that downstream tax calculations are based on the shipping address.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "shipping_address" })
    @Type(() => shared.ShippingAddress)
    shippingAddress?: shared.ShippingAddress;
}

export class UpdateCustomerExternalIdRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: UpdateCustomerExternalIdRequestBody;

    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=external_customer_id" })
    externalCustomerId: string;
}

export class UpdateCustomerExternalIdResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    customer?: shared.Customer;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
