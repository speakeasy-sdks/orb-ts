/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CustomerBalanceTransaction } from "./customerbalancetransaction";
import { CustomerTaxId } from "./customertaxid";
import { Discount } from "./discount";
import { InvoiceLineItem } from "./invoicelineitem";
import { MinimumAmount } from "./minimumamount";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about payment auto-collection for this invoice.
 */
export class InvoiceAutoCollection extends SpeakeasyBase {
    /**
     * If the invoice is scheduled for auto-collection, this field will reflect when the next attempt will occur. If dunning has been exhausted, or auto-collection is not enabled for this invoice, this field will be `null`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "next_attempt_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    nextAttemptAt?: Date;

    /**
     * If Orb has ever attempted payment auto-collection for this invoice, this field will reflect when that attempt occurred. In conjunction with `next_attempt_at`, this can be used to tell whether the invoice is currently in dunning (that is, `previously_attempted_at` is non-null, and `next_attempt_time` is non-null), or if dunning has been exhausted (`previously_attempted_at` is non-null, but `next_attempt_time` is null).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "previously_attempted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    previouslyAttemptedAt?: Date;
}

export class InvoiceCreditNotes extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "credit_note_number" })
    creditNoteNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "reason" })
    reason?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "total" })
    total?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "voided_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    voidedAt?: Date;
}

/**
 * The customer receiving this invoice.
 */
export class InvoiceCustomer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "external_customer_id" })
    externalCustomerId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;
}

/**
 * The status of this invoice as known to Orb. Invoices start in `"draft"` state for a given billing period, and are automatically transitioned to `"issued"` when that billing period ends. Invoices will be marked `"paid"` upon confirmation of successful automatic payment collection by Orb. Invoices may be manually voided; those will be in the terminal `"void"` state. Invoices synced to an external billing provider (such as Bill.com, QuickBooks, or Stripe Invoicing) will be marked as `"synced"`.
 */
export enum InvoiceStatus {
    Issued = "issued",
    Paid = "paid",
    Synced = "synced",
    Void = "void",
    Draft = "draft",
}

/**
 * The associated subscription for this invoice.
 */
export class InvoiceSubscription extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;
}

/**
 * An [`Invoice`](../reference/Orb-API.json/components/schemas/Invoice) is a fundamental billing entity, representing the request for payment for a single subscription. This includes a set of line items, which correspond to prices in the subscription's plan and can represent fixed recurring fees or usage-based fees. They are generated at the end of a billing period, or as the result of an action, such as a cancellation.
 */
export class Invoice extends SpeakeasyBase {
    /**
     * This is the final amount required to be charged to the customer and reflects the application of the customer balance to the `total` of the invoice.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount_due" })
    amountDue: string;

    /**
     * Information about payment auto-collection for this invoice.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "auto_collection" })
    @Type(() => InvoiceAutoCollection)
    autoCollection?: InvoiceAutoCollection;

    /**
     * The creation time of the resource in Orb.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    /**
     * A list of credit notes associated with the invoice
     */
    @SpeakeasyMetadata({ elemType: InvoiceCreditNotes })
    @Expose({ name: "credit_notes" })
    @Type(() => InvoiceCreditNotes)
    creditNotes?: InvoiceCreditNotes[];

    /**
     * An ISO 4217 currency string or `credits`
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency" })
    currency: string;

    /**
     * The customer receiving this invoice.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer" })
    @Type(() => InvoiceCustomer)
    customer: InvoiceCustomer;

    /**
     * A list of Customer balance transactions that may be associated with this invoice.
     */
    @SpeakeasyMetadata({ elemType: CustomerBalanceTransaction })
    @Expose({ name: "customer_balance_transactions" })
    @Type(() => CustomerBalanceTransaction)
    customerBalanceTransactions: CustomerBalanceTransaction[];

    /**
     * Tax IDs are commonly required to be displayed on customer invoices, which are added to the headers of invoices.
     *
     * @remarks
     *
     *
     * ### Supported Tax ID Countries and Types
     *
     *
     * | Country        | Type         | Description                                 |
     * |----------------|--------------|---------------------------------------------|
     * | Australia      | `au_abn`     | Australian Business Number (AU ABN)	        |
     * | Australia      | `au_arn`     | Australian Taxation Office Reference Number |
     * | Austria        | `eu_vat`     | European VAT number                         |
     * | Belgium        | `eu_vat`     | European VAT number                         |
     * | Brazil         | `br_cnpj`    | Brazilian CNPJ number                       |
     * | Brazil         | `br_cpf`     | Brazilian CPF number	                       |
     * | Bulgaria       | `bg_uic`     | Bulgaria Unified Identification Code        |
     * | Bulgaria       | `eu_vat`     | European VAT number                         |
     * | Canada         | `ca_bn`      | Canadian BN                                 |
     * | Canada         | `ca_gst_hst` | Canadian GST/HST number                     |
     * | Canada         | `ca_pst_bc`  | Canadian PST number (British Columbia)      |
     * | Canada         | `ca_pst_mb`  | Canadian PST number (Manitoba)              |
     * | Canada         | `ca_pst_sk`  | Canadian PST number (Saskatchewan)          |
     * | Canada         | `ca_qst`     | Canadian QST number (Québec)                |
     * | Chile          | `cl_tin`     | Chilean TIN                                 |
     * | Croatia        | `eu_vat`     | European VAT number                         |
     * | Cyprus         | `eu_vat`     | European VAT number                         |
     * | Czech Republic | `eu_vat`     | European VAT number                         |
     * | Denmark        | `eu_vat`     | European VAT number                         |
     * | Egypt          | `eg_tin`     | Egyptian Tax Identification Number	         |
     * | Estonia   | `eu_vat`     | European VAT number   |
     * | EU        | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme                                                   |
     * | Finland   | `eu_vat`     | European VAT number                                                                                      |
     * | France    | `eu_vat`     | European VAT number                                                                                      |
     * | Georgia   | `ge_vat`     | Georgian VAT                                                                                             |
     * | Germany   | `eu_vat`     | European VAT number                                                                                      |
     * | Greece    | `eu_vat`     | European VAT number                                                                                      |
     * | Hong Kong | `hk_br`      | Hong Kong BR number                                                                                      |
     * | Hungary   | `eu_vat`     | European VAT number                                                                                      |
     * | Hungary   | `hu_tin`     | Hungary tax number (adószám)	                                                                            |
     * | Iceland   | `is_vat`     | Icelandic VAT                                                                                            |
     * | India     | `in_gst`     | Indian GST number                                                                                        |
     * | Indonesia | `id_npwp`    | Indonesian NPWP number                                                                                   |
     * | Ireland   | `eu_vat`     | European VAT number                                                                                      |
     * | Israel    | `il_vat`     | Israel VAT                                                                                               |
     * | Italy     | `eu_vat`     | European VAT number                                                                                      |
     * | Japan     | `jp_cn`      | Japanese Corporate Number (*Hōjin Bangō*)                                                                |
     * | Japan     | `jp_rn`      | Japanese Registered Foreign Businesses' Registration Number (*Tōroku Kokugai Jigyōsha no Tōroku Bangō*)	 |
     * | Japan     | `jp_trn`     | Japanese Tax Registration Number (*Tōroku Bangō*)	                                                       |
     * | Kenya     | `ke_pin`     | Kenya Revenue Authority Personal Identification Number                                                   |
     * | Latvia    | `eu_vat`     | European VAT number                                                                                  |
     * | Liechtenstein | `li_uid`  | Liechtensteinian UID number           |
     * | Lithuania     | `eu_vat`  | European VAT number	                  |
     * | Luxembourg    | `eu_vat`  | European VAT number	                  |
     * | Malaysia      | `my_frp`  | Malaysian FRP number                  |
     * | Malaysia      | `my_itn`  | Malaysian ITN                         |
     * | Malaysia      | `my_sst`  | Malaysian SST number                  |
     * | Malta         | `eu_vat ` | European VAT number                   |
     * | Mexico        | `mx_rfc`  | Mexican RFC number                    |
     * | Netherlands   | `eu_vat`  | European VAT number	                  |
     * | New Zealand   | `nz_gst`  | New Zealand GST number	               |
     * | Norway        | `no_vat`  | Norwegian VAT number                  |
     * | Philippines   | `ph_tin	` | Philippines Tax Identification Number |
     * | Poland        | `eu_vat`  | European VAT number                   |
     * | Portugal      | `eu_vat`  | European VAT number                   |
     * | Romania       | `eu_vat`  | European VAT number                   |
     * | Russia        | `ru_inn`  | Russian INN                           |
     * | Russia        | `ru_kpp`  | Russian KPP                           |
     * | Saudi Arabia  | `sg_gst`  | Singaporean GST                       |
     * | Singapore     | `sg_uen`  | Singaporean UEN	                      |
     * | Slovakia      | `eu_vat`  | European VAT number                   |
     * | Slovenia      | `eu_vat`  | European VAT number                   |
     * | Slovenia             | `si_tin` | Slovenia tax number (davčna številka)	             |
     * | South Africa	        | `za_vat` | South African VAT number                           |
     * | South Korea          | `kr_brn` | Korean BRN                                         |
     * | Spain                | `es_cif` | Spanish NIF number (previously Spanish CIF number) |
     * | Spain                | `eu_vat` | European VAT number	                               |
     * | Sweden               | `eu_vat` | European VAT number                                |
     * | Switzerland          | `ch_vat` | Switzerland VAT number	                            |
     * | Taiwan               | `tw_vat` | Taiwanese VAT	                                     |
     * | Thailand             | `th_vat` | Thai VAT                                           |
     * | Turkey               | `tr_tin` | Turkish Tax Identification Number                  |
     * | Ukraine              | `ua_vat` | Ukrainian VAT                                      |
     * | United Arab Emirates | `ae_trn` | United Arab Emirates TRN	                          |
     * | United Kingdom       | `eu_vat` | Northern Ireland VAT number                        |
     * | United Kingdom       | `gb_vat` | United Kingdom VAT number                          |
     * | United States        | `us_ein` | United States EIN                                  |
     *
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_tax_id" })
    @Type(() => CustomerTaxId)
    customerTaxId?: CustomerTaxId;

    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => Discount)
    discount: Discount;

    /**
     * When the invoice payment is due.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "due_date" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueDate: Date;

    /**
     * A URL for the invoice portal.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hosted_invoice_url" })
    hostedInvoiceUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * Issue date of the invoice
     */
    @SpeakeasyMetadata()
    @Expose({ name: "invoice_date" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    invoiceDate: Date;

    /**
     * The link to download the PDF representation of the `Invoice`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "invoice_pdf" })
    invoicePdf: string;

    /**
     * If the invoice failed to issue, this will be the last time it failed to issue (even if it is now in a different state.)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "issue_failed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    issueFailedAt?: Date;

    /**
     * If the invoice has been issued, this will be the time it transitioned to `issued` (even if it is now in a different state.)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "issued_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    issuedAt?: Date;

    /**
     * The breakdown of prices in this invoice.
     */
    @SpeakeasyMetadata({ elemType: InvoiceLineItem })
    @Expose({ name: "line_items" })
    @Type(() => InvoiceLineItem)
    lineItems: InvoiceLineItem[];

    /**
     * Free-form text which is available on the invoice PDF and the Orb invoice portal.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "memo" })
    memo?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "minimum" })
    @Type(() => MinimumAmount)
    minimum: MinimumAmount;

    /**
     * If the invoice has a status of `paid`, this gives a timestamp when the invoice was paid.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paid_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    paidAt?: Date;

    /**
     * If payment was attempted on this invoice but failed, this will be the time of the most recent attempt.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_failed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    paymentFailedAt?: Date;

    /**
     * If payment was attempted on this invoice, this will be the start time of the most recent attempt. This field is especially useful for delayed-notification payment mechanisms (like bank transfers), where payment can take 3 days or more.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_started_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    paymentStartedAt?: Date;

    /**
     * If the invoice is in draft, this timestamp will reflect when the invoice is scheduled to be issued.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scheduled_issue_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    scheduledIssueAt?: Date;

    /**
     * The status of this invoice as known to Orb. Invoices start in `"draft"` state for a given billing period, and are automatically transitioned to `"issued"` when that billing period ends. Invoices will be marked `"paid"` upon confirmation of successful automatic payment collection by Orb. Invoices may be manually voided; those will be in the terminal `"void"` state. Invoices synced to an external billing provider (such as Bill.com, QuickBooks, or Stripe Invoicing) will be marked as `"synced"`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: InvoiceStatus;

    /**
     * The associated subscription for this invoice.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subscription" })
    @Type(() => InvoiceSubscription)
    subscription: InvoiceSubscription;

    /**
     * The total before any discounts and minimums are applied.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subtotal" })
    subtotal: string;

    /**
     * If the invoice failed to sync, this will be the last time an external invoicing provider sync was attempted. This field will always be `null` for invoices using Orb Invoicing.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sync_failed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    syncFailedAt?: Date;

    /**
     * The total after any minimums, discounts, and taxes have been applied.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "total" })
    total: string;

    /**
     * If the invoice has a status of `void`, this gives a timestamp when the invoice was voided.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "voided_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    voidedAt?: Date;
}
